# -*- coding: utf-8 -*-
"""project-capstone

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhuUdecMcbDl4AQSC20gzWo9ux0kbobN
"""

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



data=pd.read_csv('/content/creditcard.csv')
data.head(5)

data.tail()

#information the dataset
data.info()

#checking the missing values in the dataset
data.isnull().sum()

#distribution of legit transasction and fradulant transaction
data['Class'].value_counts()

"""# This Dataset is highly unblanced
0>----normal transaction
1>----fradulnt transaction

"""

#separating the datasets of legit and the fradulant
legit=data[data.Class==0]
fraud=data[data.Class==1]

print(legit.shape)
print(fraud.shape)

#statistical measure of
legit.Amount.describe()

#statistical measure of
fraud.Amount.describe()



#compare the both transactions
data.groupby('Class').mean()

"""Number of fradulant distribution = 492

Build a dataset containing similar distribution of normal distribution and fraudulent distribution
"""

legit_sample=legit.sample(n=492)

"""concatinating both dataframes

"""

new_dataset=pd.concat([legit_sample,fraud],axis=0)

print(new_dataset.shape)

print(new_dataset.head())

print(new_dataset.tail())

new_dataset.groupby('Class').mean()

"""spliting the data into features and targets

"""

x=new_dataset.drop(columns='Class',axis=1)
y=new_dataset['Class']

print(x)

print(y)

"""train and testing the data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

print(y.shape,y_train.shape,y_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

#training the logistic regression model with training mode
model.fit(x_train,y_train)

"""Accuracy score"""

#accuracy of training data
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('Accuracy on training data;',training_data_accuracy)





#accuracy on train data
x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('accuarcy score on test data;',test_data_accuracy)



